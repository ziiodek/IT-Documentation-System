@using ITDocumentation.Data
@inject ApplicationDbContext dbContext
@inject ProtectedSessionStorage ProtectedSessionStore

<RadzenTemplateForm Data="@SYM" Submit="@((SYM args) => { Submit(args); })">
    <div class="row">
        <div class="col-sm-2 ">
            <RadzenLabel Text="*LPAR" />
        </div>
        <div class="col-sm-8">
            <RadzenTextBox @bind-Value=@SYM.LPAR Name="Lpar" style="width:100%;" />
            <br>
            <RadzenRequiredValidator Component="Lpar" Text="LAPR is required" Popup="true" Style="position: absolute" />
        </div>
    </div>
    <br>
    <div class="row">
        <div class="col-sm-2 ">
            <RadzenLabel Text="*SYM Number" />
        </div>
        <div class="col-sm-8">
            <RadzenTextBox @bind-Value=@SYM.SymNo Name="SYMNo" style="width:100%;" />
            <br>
            <RadzenRequiredValidator Component="SYMNo" Text="SYM Number is required" Popup="true" Style="position: absolute" />
        </div>
    </div>
    <br>
    <div class="row">
        <div class="col-sm-2 ">
            <RadzenLabel Text="*Disk" />
        </div>
        <div class="col-sm-8">
            <RadzenTextBox @bind-Value=@SYM.DiskQuantity Name="Disk" style="width:100%;" />
            <br>
            <RadzenRequiredValidator Component="Disk" Text="Disk quantity is required" Popup="true" Style="position: absolute" />
        </div>
    </div>
    <br>
    <div class="row">
        <div class="col-sm-2 ">
            <RadzenLabel Text="*Size in MB" />
        </div>
        <div class="col-sm-8">
            <RadzenTextBox @bind-Value=@SYM.SizeMB Name="SizeMB" style="width:100%;" />
            <br>
            <RadzenRequiredValidator Component="SizeMB" Text="Size in MB is required" Popup="true" Style="position: absolute" />
        </div>
    </div>
    <br>
    <div class="row">
        <div class="col-sm-2 ">
            <RadzenLabel Text="*Version and SP" />
        </div>
        <div class="col-sm-8">
            <RadzenTextBox @bind-Value=@SYM.VersionSP Name="VersionSP" style="width:100%;" />
            <br>
            <RadzenRequiredValidator Component="VersionSP" Text="Version and SP quantity is required" Popup="true" Style="position: absolute" />
        </div>
    </div>
    <br>
    <div class="row">
        <div class="col-sm-2 ">
            <RadzenLabel Text="*System Date" />
        </div>
        <div class="col-sm-8">
            <RadzenDatePicker @bind-Value="@systemDate" DateFormat="MM/dd/yyyy" Name="SystemDate" InitialViewDate="todayDate" />
            <br>
            <RadzenRequiredValidator Component="SystemDate" Text="Disk quantity is required" Popup="true" Style="position: absolute" />
        </div>
    </div>
    <br>
    <div class="row">
        <div class="col-sm-2 ">
            <RadzenLabel Text="*SYM Creation Date" />
        </div>
        <div class="col-sm-8">
            <RadzenDatePicker @bind-Value="@creationDate" DateFormat="MM/dd/yyyy" Name="CreationDate" InitialViewDate="todayDate" />
            <br>
            <RadzenRequiredValidator Component="CreationDate" Text="Creation date is required" Popup="true" Style="position: absolute" />
        </div>
    </div>
        <br>
    <div class="row">
        <div class="col-sm-2 ">
            <RadzenLabel Text="*Status" />
        </div>
        <div class="col-sm-8">
            <RadzenDropDown @bind-Value=@SYM.Status Data=@status Name="Status" />
            <br>
            <RadzenRequiredValidator Component="Status" Text="Status is required" Popup="true" Style="position: absolute" />
        </div>
    </div>
    <br>
    <div class="row">
        <div class="col-sm-2 ">
            <RadzenLabel Text="*Owner" />
        </div>
        <div class="col-sm-8">
            <RadzenTextBox @bind-Value=@SYM.Owner Name="Owner" style="width:100%;" />
            <br>
            <RadzenRequiredValidator Component="Owner" Text="Owner is required" Popup="true" Style="position: absolute" />
        </div>
    </div>
    <br>
    <div class="row">
        <div class="col-sm-2 ">
            <RadzenLabel Text="*Point of contact" />
        </div>
        <div class="col-sm-8">
            <RadzenTextBox @bind-Value=@SYM.PointContact Name="PointofContact" style="width:100%;" />
            <br>
            <RadzenRequiredValidator Component="PointofContact" Text="Point of contact is required" Popup="true" Style="position: absolute" />
        </div>
    </div>
    <br>
    <div class="row">
        <div class="col-sm-2 ">
            <RadzenLabel Text="*SYM Functionality" />
        </div>
        <div class="col-sm-8">
            <RadzenTextBox @bind-Value=@SYM.SymFunctionality Name="SYMFunctionality" style="width:100%;" />
            <br>
            <RadzenRequiredValidator Component="SYMFunctionality" Text="SYM Functionality is required" Popup="true" Style="position: absolute" />
        </div>
    </div>
    <br>
    <div class="row">
        <div class="col-sm-2 ">
            <RadzenLabel Text="*Current testing" />
        </div>
        <div class="col-sm-8">
            <RadzenTextBox @bind-Value=@SYM.CurrentTesting Name="CurrentTesting" style="width:100%;" />
            <br>
            <RadzenRequiredValidator Component="CurrentTesting" Text="Current testing is required" Popup="true" Style="position: absolute" />
        </div>
    </div>
    <br>
    <div class="row">
        <div class="col-sm-2 ">
            <RadzenLabel Text="*Active CWR's being tested" />
        </div>
        <div class="col-sm-8">
            <RadzenTextBox @bind-Value=@SYM.ActiveCWRTested Name="ActiveCWR" style="width:100%;" />
            <br>
            <RadzenRequiredValidator Component="ActiveCWR" Text="Active CWR'S tested' is required" Popup="true" Style="position: absolute" />
        </div>
    </div>
    <br>
    <div class="row">
        <div class="col-sm-2 ">
            <RadzenLabel Text="*Physical Location" />
        </div>
        <div class="col-sm-8">
            <RadzenTextBox @bind-Value=@SYM.PhysicalLocation Name="PhysicalLocation" style="width:100%;" />
            <br>
            <RadzenRequiredValidator Component="PhysicalLocation" Text="Physical Location is required" Popup="true" Style="position: absolute" />
        </div>
    </div>
    <br>
    <div class="row">
        <div class="col-sm-2 ">
            <RadzenLabel Text="*Notes" />
        </div>
        <div class="col-sm-8">
            <RadzenTextArea @bind-Value=@SYM.Notes Name="Notes" style="width:100%;" />
            <br>
            <RadzenRequiredValidator Component="Notes" Text="Notes is required" Popup="true" Style="position: absolute" />
        </div>
    </div>
    <br>
    <br>
    <div class="row justify-content-center">
        <div class="col-md-12 d-flex align-items-end justify-content-left" style="margin-top: 16px;">
            <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="Save" data-bs-toggle="collapse" href="#collapseDowntime" role="button" aria-expanded="false" aria-controls="collapseDowntime" />
            <RadzenButton Icon="cancel" style="display: inline-block; margin-left: 10px;" Text="Cancel" Click="@Cancel" data-bs-toggle="collapse" href="#collapseDowntime" role="button" aria-expanded="false" aria-controls="collapseDowntime" />
        </div>
    </div>
</RadzenTemplateForm>

@code {

    [Parameter]
    public SYM SYM { get; set; }
    [Parameter]
    public List<SYM> SYMList { get; set; }
    [Parameter]
    public EventCallback<SYM> SetSYM__parentEvent { get; set; }
    [Parameter]
    public EventCallback<string> SetState__parentEvent { get; set; }
    [Parameter]
    public EventCallback<List<SYM>> SetSYMList__parentEvent { get; set; }
    [Parameter]
    public string state { get; set; }
    [Parameter]
    public EventCallback<bool> ShowAlert__ParentEvent { get; set; }
    [Parameter]
    public EventCallback<string> SetAlertMessage__ParentEvent { get; set; }
    [Parameter]
    public EventCallback<string> SetAlertType__ParentEvent { get; set; }

    string user { get; set; }
    DateTime todayDate = DateTime.Now;
    DateTime systemDate;
    DateTime creationDate;

    List<string> status;


    protected override async Task OnInitializedAsync()
    {


        SYM.DateTime = DateTime.Now;
        todayDate = DateTime.Now;
        systemDate = DateTime.Now;
        creationDate = DateTime.Now;
        status = new List<string>();
        status.Add("Active");
        status.Add("Down");
        status.Add("Deleted");

        var result = await ProtectedSessionStore.GetAsync<string>("user");
        if (result.Success)
        {
            user = result.Value.ToString();

        }
    }

    void OnChange(string args)
    {
        SYM.Notes = args;

    }

    void Submit(SYM SYM)
    {
        if (state == "create")
        {
            SYM.DateTime = DateTime.Now;
            SYM.AuthorName = user;
            SYM.ModifiedDate = DateTime.Now;
            SYM.SystemDate = systemDate.ToString();
            SYM.SYMCreationDate = creationDate.ToString();
            dbContext.SYMS.Add(SYM);
            dbContext.SaveChanges();
            SYMList = dbContext.SYMS.ToList();
            ShowAlert__ParentEvent.InvokeAsync(true);
            SetAlertMessage__ParentEvent.InvokeAsync("Record Succesfully created");
            SetAlertType__ParentEvent.InvokeAsync("alert alert-primary");

        }
        else if (state == "update")
        {
            SYM.ModifiedBy = user;
            SYM.ModifiedDate = DateTime.Now;
            SYM prevSYM = dbContext.SYMS.First(a => a.ID == this.SYM.ID);
            dbContext.Entry(prevSYM).CurrentValues.SetValues(SYM);
            dbContext.SaveChanges();
            SYMList = dbContext.SYMS.ToList();
            ShowAlert__ParentEvent.InvokeAsync(true);
            SetAlertMessage__ParentEvent.InvokeAsync("Record Succesfully updated");
            SetAlertType__ParentEvent.InvokeAsync("alert alert-primary");
        }

        SetSYMList__parentEvent.InvokeAsync(SYMList);
        SetState__parentEvent.InvokeAsync("create");
        SetSYM__parentEvent.InvokeAsync(new SYM());

    }

    void Cancel()
    {
        SetState__parentEvent.InvokeAsync("create");
        SetSYM__parentEvent.InvokeAsync(new SYM());


    }

}