@using ITDocumentation.Data
@inject ApplicationDbContext dbContext
@inject ProtectedSessionStorage ProtectedSessionStore

<RadzenTemplateForm Data="@downtime" Submit="@((Downtime args) => { Submit(args); })">
    <div class="row">
        <div class="col-sm-6">
            <div class="row">
                <div class="col-sm-2 ">
                    <RadzenLabel Text="*System Impacted" />
                </div>
                <div class="col-sm-8">
                    <RadzenTextBox @bind-Value=@downtime.SystemImpacted Name="System" style="width:100%;" />
                    <br>
                    <RadzenRequiredValidator Component="System" Text="System Impacted is required" Popup="true" Style="position: absolute" />
                </div>
            </div>

        </div>
        <div class="col-sm-6">
            <div class="row">
                <div class="col-sm-2 ">
                    <RadzenLabel Text="*Requestor" />
                </div>
                <div class="col-sm-8">
                    <RadzenTextBox @bind-Value=@downtime.Requestor Name="Requestor" style="width:100%;" />
                    <br>
                    <RadzenRequiredValidator Component="System" Text="Requestor Name is required" Popup="true" Style="position: absolute" />
                </div>
            </div>

        </div>
    </div>
    <br>
    <div class="row">
        <div class="col-sm-6">
            <div class="row">
                <div class="col-sm-2 ">
                    <RadzenLabel Text="*Status" />
                </div>
                <div class="col-sm-8">
                    <RadzenDropDown @bind-Value=@downtime.Status Data=@statusList Placeholder="Select Status" Name="Status" style="width:100%;" />
                    <br>
                    <RadzenRequiredValidator Component="Status" Text="Status is required" Popup="true" Style="position: absolute" />
                </div>
            </div>
        </div>
        <div class="col-sm-6">
            <div class="row">
                <div class="col-sm-2 ">
                    <RadzenLabel Text="*Ticket No." />
                </div>
                <div class="col-sm-8">
                    <RadzenTextBox @bind-Value=@downtime.Ticket Name="Ticket" style="width:100%;" />
                    <br>
                    <RadzenRequiredValidator Component="Ticket" Text="Ticket Number is required" Popup="true" Style="position: absolute" />
                </div>
            </div>
        </div>
    </div>

    <br>
<div class="row">
    <div class="col-sm-6">
            <div class="row">
                <div class="col-sm-2 ">
                    <RadzenLabel Text="*Start Date" />
                </div>
                <div class="col-sm-8">
                    <RadzenDatePicker @bind-Value=@startTime Name="StartD" style="width:100%;" ShowTime="false" DateFormat="MM/dd/yyyy" />
                    <br>
                    <RadzenRequiredValidator Component="StartD" Text="Start Date is required" TimeOnly="true" DateFormat="HH:mm" Popup="true" Style="position: absolute" />
                </div>
            </div>

    </div>
    <div class="col-sm-6">
            <div class="row">
                <div class="col-sm-2 ">
                    <RadzenLabel Text="*End Date" />
                </div>
                <div class="col-sm-8">
                    <RadzenDatePicker @bind-Value=@endTime Name="EndD" style="width:100%;" ShowTime="false" DateFormat="MM/dd/yyyy" />
                    <br>
                    <RadzenRequiredValidator Component="EndD" Text="End Date is required" TimeOnly="true" DateFormat="HH:mm" Popup="true" Style="position: absolute" />
                </div>
            </div>
    </div>
</div>
<br>
    <div class="row">
        <div class="col-sm-6">
            <div class="row">
                <div class="col-sm-2 ">
                    <RadzenLabel Text="Time Lapsed" />
                </div>
                <div class="col-sm-8">
                    <RadzenTextBox @bind-Value=@downtime.TimeLapsed Name="Ticket" style="width:100%;" />
                </div>
            </div>

        </div>
        <div class="col-sm-6">
            <div class="row">
                <div class="col-sm-2 ">
                    <RadzenLabel Text="Time Lapsed in MM" />
                </div>
                <div class="col-sm-8">
                    <RadzenTextBox @bind-Value=@downtime.TimeLapsedMinutes Name="Ticket" style="width:100%;" />
                </div>
            </div>
        </div>
    </div>
<br>
    <div class="row">
        <div class="col-sm-6">
            <div class="row">
                <div class="col-sm-2 ">
                    <RadzenLabel Text="*Impact" />
                </div>
                <div class="col-sm-8">
                    <RadzenTextArea @bind-Value=@downtime.Impact Name="Impact" style="width:100%;" />
                    <br>
                    <RadzenRequiredValidator Component="Impact" Text="Impact is required" Popup="true" Style="position: absolute" />
                </div>
            </div>

        </div>
        <div class="col-sm-6">
            <div class="row">
                <div class="col-sm-2 ">
                    <RadzenLabel Text="*Cause" />
                </div>
                <div class="col-sm-8">
                    <RadzenTextArea @bind-Value=@downtime.Cause Name="Cause" style="width:100%;" />
                    <br>
                    <RadzenRequiredValidator Component="Cause" Text="Cause is required" Popup="true" Style="position: absolute" />
                </div>
            </div>
        </div>
    </div>   
    <br>
    <div class="row">
        <div class="col-sm-6">
            <div class="row">
                <div class="col-sm-2 ">
                    <RadzenLabel Text="Corrective Action" />
                </div>
                <div class="col-sm-8">
                    <RadzenTextArea @bind-Value=@downtime.CorrectiveAction Name="Corrective" style="width:100%;" />
                </div>
            </div>
        </div>
        <div class="col-sm-6">
            <div class="row">
                <div class="col-sm-2 ">
                    <RadzenLabel Text="*Notes" />
                </div>
                <div class="col-sm-8">
                    <RadzenTextArea @bind-Value=@downtime.Notes Name="Notes" style="width:100%;" />
                    <br>
                    <RadzenRequiredValidator Component="Notes" Text="Notes are required" Popup="true" Style="position: absolute" />
                </div>
            </div>
        </div>
    </div>
    <br>
    <br>
    <div class="row justify-content-center">
        <div class="col-md-12 d-flex align-items-end justify-content-left" style="margin-top: 16px;">
            <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="Save" data-bs-toggle="collapse" href="#collapseDowntime" role="button" aria-expanded="false" aria-controls="collapseDowntime" />
            <RadzenButton Icon="cancel" style="display: inline-block; margin-left: 10px;" Text="Cancel" Click="@Cancel" data-bs-toggle="collapse" href="#collapseDowntime" role="button" aria-expanded="false" aria-controls="collapseDowntime" />
        </div>
    </div>
</RadzenTemplateForm>

@code {

    [Parameter]
    public Downtime downtime { get; set; }
    [Parameter]
    public List<Downtime> downtimeList { get; set; }
    [Parameter]
    public EventCallback<Downtime> SetDowntime__parentEvent { get; set; }
    [Parameter]
    public EventCallback<string> SetState__parentEvent { get; set; }
    [Parameter]
    public EventCallback<List<Downtime>> SetDowntimeList__parentEvent { get; set; }
    [Parameter]
    public string state { get; set; }
    [Parameter]
    public EventCallback<bool> ShowAlert__ParentEvent { get; set; }
    [Parameter]
    public EventCallback<string> SetAlertMessage__ParentEvent { get; set; }
    [Parameter]
    public EventCallback<string> SetAlertType__ParentEvent { get; set; }


    List<string> statusList;
    string user { get; set; }
    DateTime startTime;
    DateTime endTime;

    protected override async Task OnInitializedAsync()
    {


        startTime = DateTime.Now;
        endTime = DateTime.Now;
        statusList = new List<string>();
        statusList.Add("Down");
        statusList.Add("Degraded");

        var result = await ProtectedSessionStore.GetAsync<string>("user");
        if (result.Success)
        {
            user = result.Value.ToString();

        }
    }

    void Submit(Downtime downtime)
    {
        if (state == "create")
        {
            downtime.DateTime = DateTime.Now;
            downtime.Date = DateTime.Now.ToString();
            downtime.AuthorName = user;
            downtime.StartTime = startTime.ToString();
            downtime.EndTime = endTime.ToString();
            dbContext.Downtime.Add(downtime);
            dbContext.SaveChanges();
            downtimeList = dbContext.Downtime.ToList();
            ShowAlert__ParentEvent.InvokeAsync(true);
            SetAlertMessage__ParentEvent.InvokeAsync("Record Succesfully created");
            SetAlertType__ParentEvent.InvokeAsync("alert alert-primary");

        }
        else if (state == "update")
        {
            downtime.ModifiedBy = user;
            downtime.ModifiedDate = DateTime.Now;
            downtime.StartTime = startTime.ToString();
            downtime.EndTime = endTime.ToString();
            Downtime prevDowntime = dbContext.Downtime.First(d => d.ID == this.downtime.ID);
            dbContext.Entry(prevDowntime).CurrentValues.SetValues(downtime);
            dbContext.SaveChanges();
            downtimeList = dbContext.Downtime.ToList();
            ShowAlert__ParentEvent.InvokeAsync(true);
            SetAlertMessage__ParentEvent.InvokeAsync("Record Succesfully updated");
            SetAlertType__ParentEvent.InvokeAsync("alert alert-primary");
        }

        SetDowntimeList__parentEvent.InvokeAsync(downtimeList);
        SetState__parentEvent.InvokeAsync("create");
        SetDowntime__parentEvent.InvokeAsync(new Downtime());

    }

    void Cancel()
    {
        SetState__parentEvent.InvokeAsync("create");
        SetDowntime__parentEvent.InvokeAsync(new Downtime());


    }

}