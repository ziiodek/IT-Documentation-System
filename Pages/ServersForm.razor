@using ITDocumentation.Data
@inject ApplicationDbContext dbContext
@inject ProtectedSessionStorage ProtectedSessionStore

<RadzenTemplateForm Data="@server" Submit="@((Server args) => { Submit(args); })">
    <div class="row">
        <div class="col-sm-2 ">
            <RadzenLabel Text="*Name" />
        </div>
        <div class="col-sm-8">
            <RadzenTextBox @bind-Value=@server.Name Name="Name" style="width:100%;" />
            <br>
            <RadzenRequiredValidator Component="Name" Text="Name is required" Popup="true" Style="position: absolute" />
        </div>
    </div>
    <br>
    <div class="row">
        <div class="col-sm-2 ">
            <RadzenLabel Text="*Version" />
        </div>
        <div class="col-sm-8">
            <RadzenTextBox @bind-Value=@server.Version Name="Version" style="width:100%;" />
            <br>
            <RadzenRequiredValidator Component="Version" Text="Version is required" Popup="true" Style="position: absolute" />
        </div>
    </div>
    <br>
    <div class="row">
        <div class="col-sm-2 ">
            <RadzenLabel Text="*Ip Address" />
        </div>
        <div class="col-sm-8">
            <RadzenTextBox @bind-Value=@server.Ip Name="Ip" style="width:100%;" />
            <br>
            <RadzenRequiredValidator Component="Ip" Text="Ip Address is required" Popup="true" Style="position: absolute" />
        </div>
    </div>
    <br>
    <div class="row">
        <div class="col-sm-2 ">
            <RadzenLabel Text="*Status" />
        </div>
        <div class="col-sm-8">
            <RadzenDropDown @bind-Value=@server.Status Data=@status Name="Status" style="width:100%;"/>
            <br>
            <RadzenRequiredValidator Component="Status" Text="Status is required" Popup="true" Style="position: absolute" />
        </div>
    </div>
    <br>
    <div class="row">
        <div class="col-sm-2 ">
            <RadzenLabel Text="*Patched by" />
        </div>
        <div class="col-sm-8">
            <RadzenTextBox @bind-Value=@server.PatchedBy Name="PatchedBy" style="width:100%;" />
            <br>
            <RadzenRequiredValidator Component="PatchedBy" Text="Patched by name is required" Popup="true" Style="position: absolute" />
        </div>
    </div>
    <br>
    <div class="row">
        <div class="col-sm-2 ">
            <RadzenLabel Text="*Date patched" />
        </div>
        <div class="col-sm-8">
            <RadzenDatePicker @bind-Value="@datePatched" DateFormat="MM/dd/yyyy" Name="DatePatched" InitialViewDate="todayDate" />
            <br>
            <RadzenRequiredValidator Component="DatePatched" Text="Date patched is required" Popup="true" Style="position: absolute" />
        </div>
    </div>
    <br>
    <div class="row">
        <div class="col-sm-2 ">
            <RadzenLabel Text="Add Exclusions" />
        </div>
        <div class="col-sm-8">
            <RadzenTextBox @bind-Value=@server.AddExclusions style="width:100%;" />
        </div>
    </div>
    <br>
    <div class="row">
        <div class="col-sm-2 ">
            <RadzenLabel Text="Taegis Agent" />
        </div>
        <div class="col-sm-8">
            <RadzenTextBox @bind-Value=@server.TaegisAgent style="width:100%;" />
        </div>
    </div>
    <br>
    <div class="row">
        <div class="col-sm-2 ">
            <RadzenLabel Text="DUO" />
        </div>
        <div class="col-sm-8">
            <RadzenTextBox @bind-Value=@server.DUO style="width:100%;" />
        </div>
    </div>
    <br>
    <div class="row">
        <div class="col-sm-2 ">
            <RadzenLabel Text="Notes" />
        </div>
        <div class="col-sm-8">
            <RadzenTextArea @bind-Value=@server.Notes style="width:100%;" />
        </div>
    </div>
    <br>
    <br>
    <div class="row justify-content-center">
        <div class="col-md-12 d-flex align-items-end justify-content-left" style="margin-top: 16px;">
            <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="Save" data-bs-toggle="collapse" href="#collapseDowntime" role="button" aria-expanded="false" aria-controls="collapseDowntime" />
            <RadzenButton Icon="cancel" style="display: inline-block; margin-left: 10px;" Text="Cancel" Click="@Cancel" data-bs-toggle="collapse" href="#collapseDowntime" role="button" aria-expanded="false" aria-controls="collapseDowntime" />
        </div>
    </div>
</RadzenTemplateForm>

@code {

    [Parameter]
    public Server server { get; set; }
    [Parameter]
    public List<Server> serverList { get; set; }
    [Parameter]
    public EventCallback<Server> SetServer__parentEvent { get; set; }
    [Parameter]
    public EventCallback<string> SetState__parentEvent { get; set; }
    [Parameter]
    public EventCallback<List<Server>> SetServerList__parentEvent { get; set; }
    [Parameter]
    public string state { get; set; }
    [Parameter]
    public EventCallback<bool> ShowAlert__ParentEvent { get; set; }
    [Parameter]
    public EventCallback<string> SetAlertMessage__ParentEvent { get; set; }
    [Parameter]
    public EventCallback<string> SetAlertType__ParentEvent { get; set; }
    [Parameter]
    public string UserName { get; set; }


    List<string> statusList;
    string user { get; set; }
    int addExclusions = 0;
    int taegisAgent = 0;
    int duo = 0;
    DateTime todayDate = DateTime.Now;
    DateTime datePatched;
    List<string> status;


    protected override async Task OnInitializedAsync()
    {

        server.DateTime = DateTime.Now;
        datePatched = DateTime.Now;
        status = new List<string>();
        status.Add("Online");
        status.Add("Offline");
        status.Add("Needs upgrade");

        var result = await ProtectedSessionStore.GetAsync<string>("user");
        if (result.Success)
        {
            user = result.Value.ToString();

        }
    }

    void Submit(Server server)
    {
        if (state == "create")
        {
            server.DateTime = DateTime.Now;
            server.AuthorName = user;
            server.ModifiedDate = DateTime.Now;
            server.DatePatched = datePatched.ToString();
            dbContext.Server.Add(server);
            dbContext.SaveChanges();
            serverList = dbContext.Server.ToList();
            ShowAlert__ParentEvent.InvokeAsync(true);
            SetAlertMessage__ParentEvent.InvokeAsync("Record Succesfully created");
            SetAlertType__ParentEvent.InvokeAsync("alert alert-primary");

        }
        else if (state == "update")
        {
            server.ModifiedBy = user;
            server.ModifiedDate = DateTime.Now;
            Server prevServer = dbContext.Server.First(a => a.ID == this.server.ID);
            dbContext.Entry(prevServer).CurrentValues.SetValues(server);
            dbContext.SaveChanges();
            serverList = dbContext.Server.ToList();
            ShowAlert__ParentEvent.InvokeAsync(true);
            SetAlertMessage__ParentEvent.InvokeAsync("Record Succesfully updated");
            SetAlertType__ParentEvent.InvokeAsync("alert alert-primary");
        }

        SetServerList__parentEvent.InvokeAsync(serverList);
        SetState__parentEvent.InvokeAsync("create");
        SetServer__parentEvent.InvokeAsync(new Server());

    }

    void Cancel()
    {
        SetState__parentEvent.InvokeAsync("create");
        SetServer__parentEvent.InvokeAsync(new Server());


    }

}